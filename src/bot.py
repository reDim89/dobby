#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import time
import re
import logging
import os


from telegram import ReplyKeyboardMarkup, Bot, Update
from telegram.ext import Dispatcher, CommandHandler, ConversationHandler, RegexHandler,\
                         MessageHandler, CallbackContext, Filters, CallbackQueryHandler
from enum import Enum, auto
from src.utils import *

# Enum for conversation steps
class workflowHandler(Enum):
    PHONE = auto()
    PRICE = auto()
    CONFIRM = auto()

# Returns a pre compiled Regex pattern to ignore case
def comp(pattern):
    return re.compile(pattern, re.IGNORECASE)


def start_cmd(update: Update, context: CallbackContext):
    bot = context.bot
    welcome_message = '''
    –ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫, —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —Ä–µ—à–µ–Ω–∏–µ–º –º–µ–ª–∫–∏—Ö –±—ã—Ç–æ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º. –°–µ–π—á–∞—Å —è —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ –ú–æ—Å–∫–≤–µ, –Ω–æ —Å–∫–æ—Ä–æ —Å—Ç–∞–Ω—É –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏ üòä
    '''
    task_question = '–ö–∞–∫–æ–µ –ø–æ—Ä—É—á–µ–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å –º–Ω–µ –¥–∞—Ç—å? –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –Ω–∞—á–∏–Ω–∞—é—â–∏–º—Å—è —Å–æ —Å–ª–æ–≤–∞ "–î–æ–±–±–∏", –Ω–∞–ø—Ä–∏–º–µ—Ä, "–î–æ–±–±–∏, –∑–∞–∫–∞–∂–∏ –∫–ª–∏–Ω–∏–Ω–≥ –Ω–∞ —Å—É–±–±–æ—Ç—É"'
    bot.send_chat_action(chat_id=update.effective_chat.id, timeout=5, action='typing')
    time.sleep(5)
    update.message.reply_text(welcome_message)

    bot.send_chat_action(chat_id=update.effective_chat.id, timeout=3, action='typing')
    time.sleep(3)
    update.message.reply_text(task_question)

# START: Conversation to get customer task
def task_start_handler(update: Update, context: CallbackContext):
    bot = context.bot
    context.user_data['task'] = update.message.text

    bot.send_chat_action(chat_id=update.effective_chat.id, timeout=3, action='typing')
    time.sleep(3)
    update.message.reply_text('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ—Ä—É—á–µ–Ω–∏–µ! –ü—Ä–∏—à–ª–∏ –º–Ω–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã —è –º–æ–≥ —É—Ç–æ—á–Ω—è—Ç—å –¥–µ—Ç–∞–ª–∏ –∏ –æ—Ç—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏')

    return workflowHandler.PHONE

def phone_handler(update: Update, context: CallbackContext):
    bot = context.bot
    context.user_data['phone'] = update.message.text

    bot.send_chat_action(chat_id=update.effective_chat.id, timeout=3, action='typing')
    time.sleep(3)
    update.message.reply_text('–°—É–ø–µ—Ä! –ö–∞–∫–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ —Ç—ã –ø—Ä–µ–¥–ª–æ–∂–∏—à—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é? –û—Ç–ø—Ä–∞–≤—å —á–∏—Å–ª–æ –≤ —Ä—É–±–ª—è—Ö (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ —Å–∞–º–æ –ø–æ—Ä—É—á–µ–Ω–∏–µ), –Ω–∞–ø—Ä–∏–º–µ—Ä, 300 ü§ë')

    return workflowHandler.PRICE

def price_handler(update: Update, context: CallbackContext):
    bot = context.bot
    context.user_data['price'] = update.message.text

    bot.send_chat_action(chat_id=update.effective_chat.id, timeout=2, action='typing')
    time.sleep(2)

    update.message.reply_text('–ü—Ä–∏–Ω—è–ª! –ú—ã –ø–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏ üòä')
    update.message.reply_text('–û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥')

    reply_msg = {'–ü–æ—Ä—É—á–µ–Ω–∏–µ': str(context.user_data['task']),
                 '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞': str(context.user_data['phone']),
                 '–ë—é–¥–∂–µ—Ç': '–¥–æ ' + str(context.user_data['price']),
                 }
    reply_keyboard = [['‚úÖ –î–ê', '‚ùå –ù–ï–¢']]

    bot.send_chat_action(chat_id=update.effective_chat.id, timeout=4, action='typing')
    time.sleep(4)
    update.message.reply_text('–¢–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:\n')
    update.message.reply_text(''.join(k + ': ' + v + '\n' for k, v in reply_msg.items()), reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))

    return workflowHandler.CONFIRM

def confirm_handler(update: Update, context: CallbackContext):
    bot = context.bot
    confirm = update.message.text

    if confirm == '‚úÖ –î–ê':
        bot.send_chat_action(chat_id=update.effective_chat.id, timeout=3, action='typing')
        ws = get_sheet('1cVqI3DKrgQSRnSow1hDxpYNn2oSlx-teQhBI3KQITao')
        row = find_first_blank_row(ws)
        insert_task(context.user_data['task'], ws, row)
        insert_phone(context.user_data['phone'], ws, row)
        insert_price(context.user_data['price'], ws, row)
        context.bot.send_message(chat_id='-1001577571864', text='–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç {}'.format(context.user_data['phone']))
        time.sleep(3)
        update.message.reply_text(
            '–Ø –ø—Ä–∏–Ω—è–ª —Ç–≤–æ—ë –ø–æ—Ä—É—á–µ–Ω–∏–µ ü§ó –°–∫–æ—Ä–æ —Ç–µ–±–µ –Ω–∞–ø–∏—à—É—Ç –º–æ–∏ –¥—Ä—É–∑—å—è-–ª—é–¥–∏ –∏ —Ä–∞—Å—Å–∫–∞–∂—É—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ')
    else:
        bot.send_chat_action(chat_id=update.effective_chat.id, timeout=3, action='typing')
        time.sleep(3)
        update.message.reply_text(
            '–í–∏–¥–∏–º–æ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòû')
        update.message.reply_text(
            '–ù–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞—é—â–µ–µ—Å—è —Å –î–æ–±–±–∏, –µ—Å–ª–∏ —Å–Ω–æ–≤–∞ –∑–∞—Ö–æ—á–µ—à—å –¥–∞—Ç—å –º–Ω–µ –ø–æ—Ä—É—á–µ–Ω–∏–µ')

    return ConversationHandler.END

# END: Conversation to get customer task

def human_handler(update: Update, context: CallbackContext):
    user = update.message.from_user
    context.bot.send_message(chat_id='-1001577571864', text=str(user) + '—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à–∞ –ø–æ–º–æ—â—å')
    update.message.reply_text('–£–∂–µ –∑–æ–≤—É —Å–≤–æ–µ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ —á–µ–ª–æ–≤–µ–∫–∞!')

def cancel(update: Update, context: CallbackContext):
    context.bot.send_chat_action(chat_id=update.effective_chat.id, timeout=2, action='typing')
    update.message.reply_text('–í–∏–¥–∏–º–æ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòû')
    context.bot.send_chat_action(chat_id=update.effective_chat.id, timeout=4, action='typing')
    update.message.reply_text(
        '–ù–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞—é—â–µ–µ—Å—è —Å –î–æ–±–±–∏, –µ—Å–ª–∏ —Å–Ω–æ–≤–∞ –∑–∞—Ö–æ—á–µ—à—å –¥–∞—Ç—å –º–Ω–µ –ø–æ—Ä—É—á–µ–Ω–∏–µ')

    return ConversationHandler.END

def default_reply_handler(update: Update, context: CallbackContext):
    context.bot.send_chat_action(chat_id=update.effective_chat.id, timeout=2, action='typing')
    time.sleep(2)
    update.message.reply_text('–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã üòû')
    context.bot.send_chat_action(chat_id=update.effective_chat.id, timeout=3, action='typing')
    time.sleep(3)
    update.message.reply_text('–ù–∞–∂–º–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é')

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                     level=logging.INFO)

logger = logging.getLogger(__name__)

bot = Bot(token=os.environ["TOKEN"])
dispatcher = Dispatcher(bot=bot, update_queue=None, workers=0)

dispatcher.add_handler(CommandHandler(['start', 'help'], start_cmd))
dispatcher.add_handler(CommandHandler('human', human_handler))

task_handler = ConversationHandler(
    entry_points=[RegexHandler(comp('^–î–æ–±–±–∏.*'), task_start_handler)],
    states={
            workflowHandler.PHONE: [MessageHandler(Filters.text, phone_handler)],
            workflowHandler.PRICE: [MessageHandler(Filters.text, price_handler)],
            workflowHandler.CONFIRM: [MessageHandler(Filters.text, confirm_handler)],
            },
    fallbacks=[CommandHandler('cancel', cancel)]
)
dispatcher.add_handler(task_handler)

dispatcher.add_handler(MessageHandler(Filters.all, default_reply_handler))